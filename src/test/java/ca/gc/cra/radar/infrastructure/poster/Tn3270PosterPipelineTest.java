package ca.gc.cra.radar.infrastructure.poster;import static org.junit.jupiter.api.Assertions.*;import ca.gc.cra.radar.config.PosterConfig;import ca.gc.cra.radar.config.PosterConfig.ProtocolConfig;import java.nio.charset.StandardCharsets;import java.nio.file.Files;import java.nio.file.Path;import java.util.Optional;import org.junit.jupiter.api.Test;@SuppressWarnings("try")
class Tn3270PosterPipelineTest {  @Test  void requiresInputDirectory() {    Tn3270PosterPipeline pipeline = new Tn3270PosterPipeline();    ProtocolConfig config = new ProtocolConfig(Optional.empty(), Optional.empty(), Optional.of(Path.of("unused")), Optional.empty());    assertThrows(IllegalArgumentException.class, () -> pipeline.process(config, PosterConfig.DecodeMode.NONE, report -> fail("output port should be ignored")));  }  @Test  void requiresOutputDirectory() {    Tn3270PosterPipeline pipeline = new Tn3270PosterPipeline();    ProtocolConfig config = new ProtocolConfig(Optional.of(Path.of("unused")), Optional.empty(), Optional.empty(), Optional.empty());    assertThrows(IllegalArgumentException.class, () -> pipeline.process(config, PosterConfig.DecodeMode.NONE, report -> fail("output port should be ignored")));  }  @Test  void processesPairsAndIgnoresOutputPort() throws Exception {    Path input = PosterFixtures.tempDir("tn-pipeline-in");    Path output = PosterFixtures.tempDir("tn-pipeline-out");    try {      prepareTnDataset(input);      Tn3270PosterPipeline pipeline = new Tn3270PosterPipeline();      PosterOutputPortRejecting writesForbidden = new PosterOutputPortRejecting();      ProtocolConfig cfg = new ProtocolConfig(Optional.of(input), Optional.empty(), Optional.of(output), Optional.empty());      pipeline.process(cfg, PosterConfig.DecodeMode.TRANSFER, writesForbidden);      String content;      try (var stream = Files.list(output)) {        content = Files.readString(stream.filter(p -> p.getFileName().toString().endsWith(".tn3270.txt")).findFirst().orElseThrow(), StandardCharsets.UTF_8);      }      assertTrue(content.contains("=== TN3270 REQUEST ==="));      assertTrue(content.contains("=== TN3270 RESPONSE ==="));      assertTrue(content.contains("0000: 01 02"));    } finally {      PosterFixtures.deleteRecursively(output);      PosterFixtures.deleteRecursively(input);    }  }  private static void prepareTnDataset(Path input) throws Exception {    Files.createDirectories(input);    Path reqBody = input.resolve("req.bin");    Path rspBody = input.resolve("rsp.bin");    PosterFixtures.write(reqBody, new byte[] {0x01, 0x02});    PosterFixtures.write(rspBody, new byte[] {0x03});    String reqEntry = PosterFixtures.tnIndexEntry(        "tn-1",        "REQ",        100L,        101L,        "src:1",        "dst:2",        reqBody.getFileName().toString(),        Files.size(reqBody));    String rspEntry = PosterFixtures.tnIndexEntry(        "tn-1",        "RSP",        102L,        103L,        "dst:2",        "src:1",        rspBody.getFileName().toString(),        Files.size(rspBody));    Files.writeString(        input.resolve("index-000.ndjson"),        reqEntry + System.lineSeparator() + rspEntry + System.lineSeparator(),        StandardCharsets.UTF_8);  }  private static final class PosterOutputPortRejecting implements ca.gc.cra.radar.application.port.poster.PosterOutputPort {    @Override    public void write(ca.gc.cra.radar.application.port.poster.PosterOutputPort.PosterReport report) {      fail("File pipelines must not use output port");    }  }}
